0.rubymine添加sdk: file => Settings => 搜索sdk
1.	String类中的[]或slice取string中的一部分) 取的值是[a,b)另外如果不到b则就取到所有长度,如果参数是(3..6)就是[4,7]
2.	<<和push方法都是将一个对象放到数组中，包括数组对象
3.	做插件的登出操作时，不是用@user_session.destroy在数据库里做删除，而是清除session，用current_user_session.destroy
4.	当做某些操作（保存更新之类）失败用render时，只要render  ‘page’
而不用像html里面一样用render :partial => ‘page’ 傻傻的
5.	numericality: {only_integer: true, message: '年龄必须为整数'}
only_integer只是numericality的一个属性不能像numericaty一样单独使用
6.	select("post", "person_id", Person.all.collect {|p| [ p.name, p.id ] }, { include_blank: true })
7.	有的值只能在一个页面使用，而对于同样想使用的同一个框架集的页面也想用可以用content_for
Content_for: questions_count do
	@question.length if @question
	0 unless @question
End
调用时用 yield :question_count
	8．	  允许验证为空用属性allow_blank
	9.	  数据库回滚，对象不回滚。
	9.	  model.send(name)根据字符串的字段名获取模型的值
	11.	  在Array里面有个collect方法，可以用块对其本身的值做出改变生成一个新的Array
	12.	  图片上传预览
		function preview(file)
    {
        var prevDiv = document.getElementById('preview');
        if (file.files && file.files[0])
        {
            var reader = new FileReader();
            reader.onload = function(evt){
                prevDiv.innerHTML = '<img src="' + evt.target.result + '" />';
                alert(evt.target.result)
            }
            reader.readAsDataURL(file.files[0]);
        }
        else
        {
            prevDiv.innerHTML = '<div class="img" style="filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale,src=\'' + file.value + '\'"></div>';
        }
}
13.ApplicationController.helpers.options_for_select(products)可以把数组转化成option
14 <%=select_tag 'product[brand_id]',options_from_collection_for_select(@brands, "id", "name", @product.brand_id)%>默认选中的select_tag
15find()Array和where():ActiveRecord_Relation返回的结果类型不同，@xxxs的类型不不同paginate要用的是:ActiveRecord_Relation类型的这会出现undefined method `total_pages'
Paginate与等号有空格也会出现

16.暂且先认为before_action和before_filter是一个意思，同一个controller出现多个时他们是有执行的先后顺序的
before_action :login_filter
  before_action :set_user_message, only: [:edit, :update]
17.表单提交事件<form  …  onsubmit=’return true/false>
18.标签嵌套不当似乎会造成按钮的失效？form标签应当在table的外面
19. raise ActiveRecord::Rollback是让transaction后面的代码都不执行而不是整个后面的代码都不执行
20.关于flash的提示消息不消失，基本都是出现在render中，flash的生命周期在一次跳转(redirect)之间，而render不算，所以在下一次跳转之前flash中的内容任然存在，这时候就用flash.now
21.设置关联排序
		has_many :pictures,->{order(:src => :desc)}, as: :owner, :dependent => :delete_all
22.rails对html有逸出，即任何html输出如<%= ‘<input />’%>会变成&lt;input /&gt;
		如果完全允许，可以<%=raw ‘<input />’%>会输出成<input />(或者用html.html_safe)
		或者添加白名单用sanitize
		https://ihower.tw/rails4/actionview-helpers.html
23.***_ before_type_cast可以把数据转换成它未转换之前的样子，比方说某表单数据002会被赋值给数字类型变成2，用这个方法可以变成002
	rails的form_for在回显的时候，显示的应该就是这个
24.skip_before_action/filter 可以跳过在controller父类中定义的before_action，让某个before_action的方法不执行，比如在user_session中的new和create就不能用before_action就用skip_before_acrion :login_filter, except: [:destroy]跳过
25.defined?(value)中的defined?是一个运算符号会返回value的类型名(method/local-variable等)？或者nil
26.@model.try(:method).try(:method2),可以避免method/method2 undefied for nilClass
当不存在会返回空值
27. map可以遍历hash的嘛，怎么忘记了
28.Array的sort方法
msg_arr = msg_arr.sort do |key_a, key_b|
        value_a = hash_field_orders[key_a[0].to_sym].blank? ? max : hash_field_orders[key_a[0].to_sym]
        value_b = hash_field_orders[key_b[0].to_sym].blank? ? max : hash_field_orders[key_b[0].to_sym]
        value_a <=> value_b
      end
29.gsub方法可以传个块"hello".gsub(/./) {|s| s.ord.to_s + ' '}
	30.redirect_to Hash (action: :index/’action’ => ‘index’/:adtion => ‘index’)
31.request.remote_ip
32.有一个number_with_x的helper方法
33.render layout: ‘layout’/false (false是取消布局)
34.通常会把js文件写在文件下边，css写在文件上边，这样不会导致文件加载时间过长网页无法显示的问题
35.render partial: ‘products’, locals: {product: product}(,:object => @products,不建议这么用会导致局部模板与父模板耦合，重用性降低)
	<%= render :partial => @customer %>
#相当于
<%= render :partial => "customer", :object=>@customer %>
	Render :file => ‘404.html’, layout: false/true, status: 404 可以这样用
36.form_for :model, url: this_is_url, method: :post
37.设置按钮的 data: {:’disable_with’ => ‘请稍等…’}可以避免提交按钮被重复点击,可以在action中加个sleep 3让它停顿3秒
38.=~匹配的是位置以0开始，返回第一次匹配的位置
	Match返回一个matchdata类
39.window.location = window.location即重载当前页面，也就是刷新当前页面，对session失效有用，使用ajax操作
40.where查询里面不要把hash写在[]里面像这样["code" => custom_column_code, "event_id" => self.event_id, "type" => 2]这样会有错误但不会报错好像

41.ime-mode: disable可以禁止表单输入中文，全角等，输入法都切换不了全角

42.form 里面加了data-remote,即form_tag里面有remote : true时这个表单就是ajax请求，它不会跳转页面，这时可以进入跳转到的action的js.erb文件中执行js代码，像视图一样，自动进入???如果出现了InvalidAuthenticityToken时，加authenticity_token: true,不过问题好像又不在这里，因为即使这样做了，它请求的依然是html，即会造成页面的跳转，不是ajax请求，这时在application.js中写上
//= require jquery
//= require jquery_ujs
才行，我的错误好像是出现在还写了require jquery.min
43.send_file向页面发送文件,应该是类似于render的东西，render当前页面，然后发送文件
   send_data发送数据的时候会把数据锁住，如果想发送完就删除的话，用send_data最好了，会在发送完才删除
Send_file(‘file_path’, filename: ‘filename’)
44.render一个action像是render它的模板，并不会去走它里面的方法
45. src=('|"|)(.+\.(jpg|png|gif))(\1)  分组1中的意思为 单引号、双引号或者空（或者空超棒的）
46.rails里面json不用转换，已经直接成hash的样子了（不用eval）可以用data[key]
也可以用$.each(data, function(key, value){
	去遍历
})
47.respond_to do |format|
	#format.js就是render js: 不可以render  json
	#而且这和ajax的 dataType是相对应，否则响应失败
	#另外，即使是js，success的function(data)中的data也有值，即render的js,是字符串类型
 End
48.File.join是加一层路径如File.join(‘c:/file’, ‘file_path’) => ‘c:/file/file_path’
49.rails手动设置延迟sleep(5s)
50.在用js里面会有个奇怪的现象，本来用来用来显示黑屏的loadding放在ajax两边竟然没有效果，而放在ajax里面才有用，为什么呢？！
51.jq中的each方法，要跳出用return false => break, return true => continue
52.$(document).ajaxStop/Start()判断当ajax执行完或者刚开始时执行某方法，算有用的吧
	ajaxSend(function(event, request, settings){}), 其中settings就是$.ajax({})里面的参数，可以手动传入自己想要的参数
53. <%= favicon_link_tag 'icon/00010.gif'%> 添加网页标签的图标
	最后会生成<link rel=”shortcut icon” type=”image/x-icon” href=/assets/icon/00010-balabala.gif>
54.在form_for里面要穿文件的时候可以用:html=>{‘multipart’ => true}
55.如果在一个controller里面带了new比方说EnergencyNewController
	那么它的路由会变化index: admin_energency_news_index_path
						New: new_admin_energency_news_path
						Edit: edit_admin_emergency_news_path
						Delete/show/Update: admin_emergency_news_path
56.设定验证满足条件触发：
	指定方法 if: :method
			validates :card_number, presence: true, if: :paid_with_card?
	指定字符串if: :’string’
			validates :surname, presence: true, if: "name.nil?"
	指定块 if: Proc.new{ |a| a.value.present?}
			validates :display_order, :numericality => true, if: Proc.new{ |order| order.display_order.present?}
57.如果某个数组在循环中删掉了自身某个元素，下一次循环时后面的元素索引会依次减1，长度也会减一，可能会导致循环中断（如果是在循环到倒数第二个元素时删除，最后一个元素不会循环到）这个时候可以再new一个一样的
58.this.form.action可以获取当前表单的action
59.try方法可以给它里面的方法加个参数
	right_banner.try(:right_banner_picture).try(:image).try(:url, :thumb)其中url是方法:thumb是参数
60.css里面有的背景图片是被集合在一张图片上的这时候可以用background-position来移动
	-mpx, -npx表示向左向右
61.ruby里面如果需要判断是否为空再做操作的话可以用
	If  xxxx.blank?
	# 这里什么都不写
	Elsif xxxx
62.关于直接使用事件和bind事件
	有时候bind一个的函数的时候会多次运行，还不知道是为什么，可能多次绑定了，这时候可以解绑重新绑定，比如说$(‘#id’).unbind(‘click’).bind(‘click’, function(){})
	$(‘.class’).focus(function(){})
	$(’.class’).bind(‘focus click’, data, function(){})
		里面可以用unbind取消绑定事件
		而直接使用事件是不能取消绑定事件的(即使是去掉用来绑定的class也不能去掉事件)，用bind的好处大概在这里吧
	$(‘.class’).bind({event: function, event: function})
63.对于按某个字段排序，有的条目此段为空会默认排在前面，如不想可以
	Mysql: Order by if(isnull(column), 1, 0), column就会将空值默认置后(默认里面的是 0, 1)
	Oracle: order by column nulls last/first
64.jq选择兄弟结点 $(this).siblings()
	Prev() 上一个兄弟 prevAll()前面所有兄弟 next()下一个 nextAll()后面所有
65.sql中district用于过滤相同的值
68.model.attributes(hash)可以用来加值
69.@model.validates_numericality_of 可以这样在方法里面调用验证方法，这样会直接将这个验证产生的错误信息传送到里面
70.simple_form_for @model, {url: '', html:{id: ''}}
	f.input ... as: :integer可以添加一个type=number
	wrapper的config可以看rails一些插件里面的文档
71.csv_data = CSV.generate do |csv|
   csv << []

   end
   NFK.nfk('-s', csv_data)
72.send_data(csv, type: 'text/csv', filename: encode_file_name("**.csv"))
73.symbollize_keys! 把key转换成sym，只要key响应to_sym
74.路由中member和collection的不同
	member do
		get 'perview' # 生成的路由是带类的id的， 如photos/1/preview  路由就是preview_photos_path(@photo)
	end

	:member 是对单个实体进行操作，创建路由格式是： /:controller/:id/:your_method
	:collection 是对实体集合进行操作，创建路由格式是： /:controller/:your_method
	:new 是新建一个实体，创建路由格式是： /:controller/:your_method/new

	map.resources :users, :collection => { :rss => :get }
	map.resources :users, :member => { :profile => :get }
	map.resources :users, :new => { :draft => :get }
	第一行创建的路由是：/users/rss
	第二行创建的路由是：/users/1/profile
	“1”就是user_id，我们需要知道用户ID才能得到用户的profile.
	第三行创建的路由是：/users/new/draft
	*member创建的路由，帮助方法最后没有s

75.Model.where(conditions).pluck(:id, 'models.name', 'model_parents.name') do |id, m_name, mp_name|
		[id, m_name, mp_name]
	end

76.pdf下载
	html = render_to_string template: "supplier_category_pos_codes/pos_code_pdf", encoding: 'UTF-8'
	pdf = PDFKit.new(html)

	send_data pdf.to_pdf, :filename => encode_file_name('file_name.pdf'),
							:type => 'application/pdf',
							:desposition => 'outline'
77.update_attributes是执行validation的， update_attribute不执行validation
78.Barby 里面的to_png没有宽度，xdim能调宽度
79.datepicker里面有个startDate属性设置从这天开始前面的都不能选择，对应有个endDate new Date()或者当前时间，new Date(full_year, month-1, date)，里面-1可以表示12月 getMonth()获取当前月-1,如果想获取这个月的最后一天可以用下一个月的，日期是0就可以了
	ruby 获取一个月最后一秒Time.at(Time.new(2017, 12).to_i-1)
80.bootstrap输入框组input-group里面可以在form-control 后面加span，class=input-group-addon 里面就可以同行加内容了
81.Class Proc
		class << self
			# 写在这里面的赵都是类方法
		end
	end
82.paperclip图片上传对图片的一些修改
	http://railsfun.tw/t/paperclip/64
	:styles => {:coutom => {'640x640>', :jpg}}
	:convert_options => {
		:custom => '-background white -gravity center -extent 640x640 -colorspace sRGB -quality 70'
	}
	#styles convert_options里面有的styles里面也要有才能生效
	#background white是涂白

83.WdatePicker({ qsEnabled:false, dateFmt: 'yyyy-MM', isShowToday: false, isShowClear: false })可以只选择月份

84.
p.banner_pic {		//这样不会把图片左右拉伸，为什么呢
  width: 300px;
  height: 100px;
  text-align: center;
  display: table-cell;	//加了这个属性可以让下面的图片垂直居中
}
p.banner_pic img {
  vertical-align: center;
}

.banner_pic {		//这种却会
  width: 300px;
  height: 100px;
  text-align: center;
}
.banner_pic img {
  vertical-align: center;
}
85.使用modal的时候不能把modal的div写到模板里面去了，否则会失效，再次render的时候会消失不了

86.union查询的时候可以把多张表联合起来，查询的结果按列distinct
	select id as id from table1 where name like '11'
	union
	select id as id from table2 where name like '22'
	find_by_sql()可以用任意一张表查询，结果是数组
	Kaminari有一个方法Kaminari.paginate_array(@products, total_count: @products.length).page(params[:page]).per(Settings[:per_page])
	可以用来对数组作分页
	这里还缺少一个entry_name,可以在page_entries_info @products, entry_name: '' 里面指定
87.关于数据库的索引，猜想可能是针对第一条sql会不一样的
	LocalProducts的vendor_id/base_local_prodct_id加索引  根据搜索的字段组合成索引

88.用cmd登录mysql的时候 mysql -uroot -pchen5200he没有空格
	mysqld --skip-grant-tables

89.如果一个select里面一个option也没有，那提交的时候将没有值会传上去，连空字符串都没有
90.<button class="btn btn-info" type="submit" onclick="$('#pwi_search').attr('action','<%= search_admin_in_librays_path %>');"> 这个意思似乎是在表单中按enter的时候相当于click

91.
	@helper ||= Class.new do
      include ActionView::Helpers::NumberHelper
    end.new

92.tasks：
	在项目的lib\tasks目录下面
	写成文件.rake
	namespace :namesp do
		desc 'description'
		task task_name: :enviroment do

		end
	end
	在项目下面执行rake就可以了rubymine在terminal下面 到项目目录 rake namesp:task_name

93.用remote提交表彰的时候如果 传输了文件，会立即产生ajaxComplete事件
94.string类型的js如"<div></div>"只能用innterHtml，dom类型document.createElement('div')的才能用appendChild

95.
	rake pictures_process:campain_picture_update RAILS_ENV=production
	rake pictures_process:right_banner_picture_update RAILS_ENV=production
	测试服务器上执行rake

96.
	在用js在页面加载完成的时候读取图片，发现图片的width/height值为0
	因为window.onload和$(document).onload()=$()是不一样的，dom加载完图片还没加载完，所以获取的就会是0
	上面说的似乎都没用
	图片的onload事件要写在<img>里面才好生效： http://www.jb51.net/article/43003.htm
97.
	css引用文件<link rel="stylesheet" type="text/css" href="style.css">
	js引用文件<script type="text/javascript" src="js.js">
98.如果页面上有一个根据xx名字搜索的，名字中有空格的时候就要注意了，在网页上只会显示一个空格，实际上那个名字里面可能有几个空格，所以可能出现打了一个空格，而这个空格后面还跟了词就搜索不出结果了
99.想让一个图片在一个容器内居中对齐，并且宽度自适应的话就要
	box{display:table-cell;vertical-align:middle;text-align-center;}
	img{max-width:box-width;max-height:box-height;}
100.ruby里面的strftime是('%Y/%m/%d'), js里面的是new Date().Format('yyyy-MM-dd HH:mm:ss')
101.Model.find_or_initialize_by()查询到一个Model或者初始化一个model
102.在固定宽度的容器内如果文字和图片相交了，不妨把文字设置成overflow
103.在保存失败render一个页面的时候，如果有什么值要通过@变量传递到页面上，需要在render 之前赋值
104.bootstrap的colorpicker在js初始化的时候会生成两个div，在做ajax的时候注意不要去把这个初始化包含在了render里面造成多次初始化，否则会有colorpicker不消失的问题

105.在div里面，如果想让边距有颜色，只能是padding了
	给一个先给容器设置颜色再给加padding,margin是没有颜色的

106.一些插件引用到rails项目中的时候，需要分开放到几个文件夹
	注意不能只单单引入js和css也可能有图片或者字体依赖的
	像bootstrap，可能会有一些图标不能显示，就是少了字体文件

107.timestamps里面的时间如果不设置那么默认就是UTC的时间了
	如果如果是东8区，那么存储的时间就会晚8个小时
	需要做设置的话就设置时间
	config.time_zone = 'Beijing'
	config.active_record.default_timezone = :local
	这里如果代码服务器和db服务器不在一起，那么时间会是代码服务器
	https://ruby-china.org/topics/16187
108.假删除

109.Exception:
	Interrupt
	NoMemoryError
	SignalException
	ScriptError
	StandardError
	SystemExit
	总共七种rescue => e  默认的是StandardError，如果不指定可能会捕捉不到异常
	问题来自slips下面excel的上传
110.
	route配法
	resources :posts do
		match :css, :via => [:post] #=> post_css_path
		collection do
			match :js, :via => [:post] #=> js_posts_path
		end
	end
111.用字符器调用方法
	try("method".to_sym)

112.上传“false”字符串赋值给对象Bool类型的变量会自动转化成false
113.
	Can't verify CSRF token authenticity
	需要用rails的form帮助方法，或者skip验证
	  skip_before_filter :verify_authenticity_token, only: [:is_auto_selecting]

114.在服务器上面，如果有多个服务器，请求服务器A生成一个文件，然后去下载这个文件却请求到了B，会导致路径错误的问题。这个可以设置文件夹共享

115.什么时候会在db里面存空值，什么时候会存null呢？
116.在多表单联合验证的时候，单个的表单验证可能通过，但联合验证通不过，给这个联合验证的多个表单添加错误样式，可以在添加联合验证错误时手动add errors(单个表单)，然后再想办法去掉错误信息就ok了。
	对于有些错误不想显示full_errors，可以把字段的名设置成空串，就可以不显示字段名了
117.定义在$(function(){})里面的函数，变量在console里面访问不到
118.判断AvtiveModel的值是否改变
	previous_changes()
	changes()
	...

	还有个after_save和before_save等等事件

119.在Model里面定义一个enum的时候
	enum room_type = {:washitsu => 1, :youshitsu => 2...}
	ROOM_TYPE = {:washitsu => "和室", :youshitsu => "洋室"}
	这里面对于room_type属性1和"washitsu"是等价的，获取到的值也是"washitsu"
	可以用Model.room_types来获取这个enum
120.对于路由配置，如果有冲突的话，会优先进写在前面的那条
	FreePage.all.try(:each) do |fp|
		get fp.key, to: 'free_pages#show'	//这里可以通过request.url来找到那个key
	end
	也可以写
	get ':key', :to => 'free_pages#show'	//这里更简单，不过会匹配更多的不知道来源的key吧
	【前台free_pages的标题或许可以用js来改】
121.判断一个数组是否全为空的时候可以用arr.all?(:&blank?)(或者传block)也可以arr.any?(:&present?)

122.导出/读取excel

	Roo
		xlsx = Roo::Excel.new(file)
	xlsx
		p = Axlsx::Package.new
		p.workbook do |wb|
			styles = ExcelUtil.get_local_product_style(wb)
			styles = wb.styles
			styles.fonts.first.name = "メイリオ"
			styles.fonts.first.sz = 11
			#http://www.rubydoc.info/github/randym/axlsx/Axlsx%2FStyles%3Aadd_style
			# 这些属性都是数字
			head_orange_default = styles.add_style b: true, bg_color: 'FFC000', border: {color: '000000', style: :thin  }, alignment: {vertical: :center, wrap_text: false, shrink_to_fit: true}

			grey_blank = styles.add_style b: true, bg_color: 'BFBFBF', alignment: {horizontal: :center, vertical: :center, wrap_text: false, shrink_to_fit: true}
			grey_title_right = styles.add_style b: true, bg_color: 'BFBFBF', border: {color: '000000', style: :double, edges: [:bottom]    }, alignment: {horizontal: :center, vertical: :center, wrap_text: false, shrink_to_fit: true}
			grey_title_left = styles.add_style b: true, bg_color: 'BFBFBF', border: {color: '000000', style: :double, edges: [:bottom]    }, alignment: {horizontal: :center, vertical: :center, wrap_text: false, shrink_to_fit: true}

			border = styles.borders[styles.cellXfs[grey_title_right].borderId]
			border.prs << Axlsx::BorderPr.new(:name => :left, :color => Axlsx::Color.new(:rgb => '000000'), :style => :thin)

			border = styles.borders[styles.cellXfs[grey_title_left].borderId]
			border.prs << Axlsx::BorderPr.new(:name => :right, :color => Axlsx::Color.new(:rgb => '000000'), :style => :thin)



			wb.add_worksheet(:name => '') do |sheet|
				sheet.add_row([], :style => style/[style1, style2])
				sheet.column_widths width1, width2

				# 冻结窗口
				sheet.sheet_view do |vs|
				  vs.pane do |pane|
					pane.state = :frozen_split
					pane.y_split = 1
				  end
				end
			end
		end
		p.serialize file_path

	rubyXL
		workbook = RubyXL::Parser.parse(File.join(save_dir, file_name))

      worksheet = workbook[0]

      categories.each_with_index do |category, index|
        worksheet.add_cell(index+2, 0, category.try(:code_eight))
        worksheet.add_cell(index+2, 1, category.category_name_rank_with)
      end
      send_data workbook.stream.string, :filename => encode_file_name('地域納入会社?納入商品事前申請_テンプレート.xlsx'), disposition: 'attachment'
123.send_data在发送完数据之前会把文件锁起来，而send_file则不会，如果想在发送完文件就删除，那用send_data好
	File.open(file, 'r') do |f|
		send_data f.read...
	end

124.样式覆盖的优先级
	继承时，应用最近祖先的样式
	直接指定的样式覆盖继承的样式
	直接指定的发生冲突时权值高的覆盖权值低的
		标签选择器	1
		类选择器	10
		ID选择器	100
		内联样式	1000
		伪元素(:first-child等)	1
		伪类(:link等)	10
		比如”#nav .current a”的权值为100 + 10 + 1 = 111。
	!important可以看做是万不得已的时候，打破上述四个规则的”金手指”。如果你一定要采用某个样式属性，而不让它被覆盖的，可以在属性值后加上!important，以规则四的例子为例，”.byline a {color:red !important;}”可以强行使链接显示红色。大多数情况下都可以通过其他方式来控制样式的覆盖，不能滥用!important。

125.上传文件到测试服务器
	先上远程，用远程的winscp连
	192.168.200.79 其他设置基本用默认就好
	ec/123456
126.HTML5规范自定义特性需要加上data-前缀

http://blog.csdn.net/sunset108/article/details/48956101
127.class 中include可以将module中的方法变为实例方法，extend可以将module中的方法变为类方法
	module中可以定义self.extended(base)可以在被extended的时候执行base是extend的类
					self.included(base)相同
128.同时引入实例方法和类方法
	module里面写module
	可以include module::module
	也可以self.included(base)
			base.extend ClassMethods
			base.send :include, InstanceMthods
		  end
129.可以用include实现mix-in(多重继承)
130.include其他文件里面的module的时候出现uninitialize
	require_relative 'file_name'
	module应该和文件名统一 module MyMod => my_mod.rb
131.使用ActiveSupport::Concern(需要require 'active_support')
	module MM
		extend ActiveSupport::Concern
		included do
			# 可以在这里面写类方法
			extend xxx
			# 也可以
			class_eval do
				def self.method

				end
			end
		end
	end
132.bootstrap的js和css可以定制，比方说只想使用datetimepicker 只要dropdown和sprites，不用下载整个的bootstrap
133.mojinizer可以判断、转换日文的全角半角
134.column = "str"可以匹配出数据库里面值为"str "的记录
135.导入csv的时候，如果一列只有一个逗号，那它的值为nil而不是空字符串
136.js中使用正则做匹配时 /regexp/g.exec("str") 会返回一次匹配的结果['匹配到的串', '分组', index: in, input: 'str']
	如果带了g参数,第二次匹配时候会从上次匹配结束的地方继续执行(这个可以用来做循环匹配)
	/reg/.test()返回是否匹配
	'str'.search(/reg/)返回匹配的位置未匹配返回-1      (str.search(/reg/) !== -1)可以相当于test
	对于replace可以用replace(/reg/g, 'str')达到全局替换
	  第二个参数也可以是函数replace(/reg/g, function(match, $1, $2){})//match是匹配内容，后面是分组

137.html的表格里面的inline-block，如果不想让被其挤得换行，可以去掉td的宽度设置，也可以在td里面写上 nowrap
138.图片加载完成后获取高度什么的
	img.onload = img.readstatechange = function(){
		// img是js对象的图片，也可以是图片按钮
	}
139.如果想让某一个div有滚动条，设置一个固定的高度，然后 overflow-y: auto
140.rails joins references includes
	(当includes的时候)has_many会自动left out join，belongs的并且用到它的表的字段的时候才要references
	对于left join和inner join 如果表中关联id为null，inner join的时候不会查询出此记录，若不为空，关联的对象不存在inner join和left join是一样的
141.jq用each的时候，function()中传一个值是index，传两个值是js对象+index，在function中用$(this)表示遍历出来的jq对象
142.ec里面有个奇怪的问题，多对多关联不上has_many会报错 uninitialize constant xxx::xxx name error
	customer_role_emergency_news => emergency_new_customer_roles就可以
143.ActiveRecord.create()可以直接创建记录
	ActiveRecord.destroy_all('sql = ?', value)可以删除
144.has_many或者belongs_to的时候，belongs_to :all_cancel_email_template, :foreign_key => :all_cancel_email_template_id, :class_name => 'MailTemplate' # class_name需要区分大小写
	all_cancel_email_template实际上是MailTemplate

145.对于js中的动画效果，可以用$(selector).stop(stopAll, goToEnd)来停止，slideDown/animate等等都可以停止
	对于下拉菜单中的动画，hover的时候显示，hout的时候消失，如果动作太快并且重复，会造成即使停下了鼠标的移动，菜单也会重复显示->隐藏->显示
	这可以用stop(true, true),清除未完成的动画，立即完成当前动画
146.page-break-inside:avoid;可以设置html分页点，给那附近的标签设置此css属性即可
	在导出pdf的时候特别好用
147.@coma.blank? && (
      flash[:error] = I18n.t(:no_premission)
      redirect_to restaurant_restaurant_comas_path
      return
      )
	替代if
148.在填写表单的时候用回车提交，会触发onchange => submit,不会触发blur，点击submit的时候是onchange => blur => submit

149.paranoia做假删除的时候，如果需要搜索已经删除的数据可以用Model.with_deleted.关联的数据做查询的时候，belongs_to :model, ->{unscope(where: :deleted)/with_deleted},另外查询的时候要用到distinct.joins("")手动写joins，不把deleted写进去就好了，普通的joins(:model)是会有deleted的
150.find_each(默认batch_size是1000)和find_in_batches用于大量记录的批处理，适用于数量很大不适合一次性保存在内存中，可以处理模型类和关系
	可以指定(:start => [, :finish => 2.0.0版本无], :batch_size => ) start按主键
	第二个方法find_in_batches(start: , batch_size: ) do |arr|出来的是array ,
151.查询时候，使用问号(?)而不是直接填充#{params}，可以防止注入攻击
	rails内置针对特殊sql字符的过滤器用于转义 ', ", null和换行符

152.Time/Date/DateTime
	Time只能使用1970年以后的日期，包括时分秒
	Date可以使用更以前的日期但不包括时分秒 需要require "date"
	DateTime综合了Time和Date 需要require "date"

	相互转化 Time.now.to_date.to_datetime.to_time
	Time.new(year, month=nil, day=nil, hour=nil, min=nil, sec=nil, utc_offset=nil)

	%a - The abbreviated weekday name (``Sun'')-星期的缩写(``Sun'')
	%A - The full weekday name (``Sunday'')-星期 (``Sunday'')
	%b - The abbreviated month name (``Jan'')-月份的缩写 (``Jan'')
	%B - The full month name (``January'')-月份(``January'')
	%c - The preferred local date and time representation-本地时间的显示格式
	%d - Day of the month (01..31)-月份中的几号(01..31)
	%H - Hour of the day, 24-hour clock (00..23)-24小时制中的小时(00..23)
	%I - Hour of the day, 12-hour clock (01..12)-12小时制中的小时(01..12)
	%j - Day of the year (001..366)-一年中的第几天 (001..366)
	%m - Month of the year (01..12)-一年中的第几个月(01..12)
	%M - Minute of the hour (00..59)-分钟 (00..59)
	%p - Meridian indicator (``AM'' or ``PM'')-上午还是下午(``AM'' or ``PM'')
	%S - Second of the minute (00..60)-秒(00..60)
	%U - Week number of the current year, starting with the first Sunday as the first day of the first week (00..53)一年中的第几个星期，从第一个星期天开始算。
	%W - Week number of the current year, starting with the first Monday as the first day of the first week (00..53)一年中的第几个星期，从第一个星期一开始算。
	%w - Day of the week (Sunday is 0, 0..6)一个星期中的第几天(Sunday is 0, 0..6)
	%x - Preferred representation for the date alone, no time只显示日期，没有具体时间
	%X - Preferred representation for the time alone, no date只显示时间，没有日期
	%y - Year without a century (00..99)不显示年份中的前两位(00..99)
	%Y - Year with century当前年份
	%Z - Time zone name时间域

	作者：kamionayuki
	链接：http://www.jianshu.com/p/d89665aded19
	來源：简书
	著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

153.在用弹窗的时候，里面如果再用有弹窗的插件，如datetimepicker或者colorpicker，可能会被遮挡住，因为弹窗可能用了overflow属性，去掉overflow又会有问题

154.针对ie中readonly也会有onfocus的闪烁框，使用unselectable="on"可以解决，问题来自己its的【点击input弹出菜单可以选择】

155.migrate add_column 想使用比int更小的int 可以用limit

156. Could not find rake-10.0.3 in any of the sources   => bundle install --path vendor/cache

157.byteslice(start_pos, len)可以按byte截取字符串
	不过不同的编码对汉字的byte数不同，截取会有问题
	在utf-8系统中，可以对字符串先转码截取，然后再转换成utf-8 str.encode('sjis').byteslice(statr_po, len).encode('utf-8')
	在读取日文文件的时候File.open(path, "r:sjis:sjis") 第一个是把文件的编码输入进去，告知如何解析，第二个sjis是获取值的时候要sjis编码的值
	这时候读取到的是sjis编码，做完操作之后还要做其他的操作可以转换成encoding('utf-8')

158.要研究一下rails console的用法

159.rubymine 里面的exernal libraries 用的ruby版本可以在settings里面设置 ruby sdk and gems

160.rails项目出现 TypeError: 对象不支持此属性或方法
	gemfile.lock coffee-script-source 1.8.0 => bundle update => restart
161.在scss中，background: url()是相对路径 image-url()是绝对路径 都是相对于assets/images说的
162.写BaseController的时候，如果admin路径下面也有个相同名的BaseController,admin下面的类继承Admin::BaseController继承的是外层的BaseController,所以不要写同名
163.不通过id也可以做belongs_to
	belongs_to :purpose, foreign_key: :purpose_code, primary_key: :code, class_name: 'Purpose' # class_name 要真class，区分大小写
164.如果想在model里面随时调用current_user

	还需要在config/application.rb 中require一下lib中的这个文件
	module SessionAdmin

	  def self.included(base)
		  base.send(:include, InstanceMethods)
		  base.extend(ClassMethods)
	  end

	  module ClassMethods
		def current_admin
		  Admin.current
		end
		def current_admin_id
		  current_admin.try(:id)
		end
	  end


	  module InstanceMethods

		def current_admin
		  Admin.current
		end

		def current_admin_id
		  current_admin.try(:id)
		end

	  end

	end

	另外在config/initializers/xx.rb
	ApplicationRecord.send :include, SessionAdmin

	Admin
	def self.current
		Thread.current[:admin]
	  end

	  def self.current=(admin)
		Thread.current[:admin] = admin
	  end

165.如果想在model里面调用helper方法的话
	include/extend ActionView::Helpers 看是类方法里面调用还是实例方法里面调用

166.CSV是直接被包含在ruby里面的, 不需要gemfile里面添加
	导出的时候CSV.open(path, 'wb') do |csv| end, 设定导出文件的编码可以用CSV.open(path, 'wb:gb2312:utf-8'), 这样，保存的文件就是gb2312编码，谁在前面就是谁
	NKF.nkf("-sx -Lw -W -c", str) 可以解决导出的字符串编码问题

167.发送邮件 写在app/mailers里面
	发送的方法是Model.method().deliver
			default from: MAIL_FROM # 要设置from才能发送出去
			mail(to: 'address'/['address', 'address'], subject: 'title', body: '')
			想发送附件需要写方法attachments['file_name'] = File.read(file_path[, encoding: 'sjis'])  #其中的filename带扩展名，和实际读到的文件有练习，(invalid byte sequence in UTF-8 (ArgumentError))
169.Completed 200 OK in 3620ms (Views: 3596.5ms | ActiveRecord: 8.0ms)
	如果views的时间和completed的时间相差大的话可以考虑手动添加一个render
	在ana的mon_calendar里面发现了这个问题，代码最后手动添加render 'mon_calendar/new'，而不是让它自动去render模板可以更快一点
	另外是通过ajax访问产生的这个问题

170.models.group_by(|model| model.id) models.group_by(&:id)

171.jq中的closest('div')，可能匹配得到自己的

172.obj.xxx(&:yyy) == obj.xxx {|o| o.yyy}

173.setTimeout 可以解决方法执行顺序的问题， setTimeout(function, 0), 有时候设置时间大一点才有效果 setTimeout(function, 20)

174.simple_form_for 可以直接放字符串，如果没有要回显的数据或者是for @models的话
	如 simple_form_for 'base_local_product' do |f|
			@products.each do |product|
				f.simple_fields_for product do |ff|
					<%= ff.input %>
					=> 会生成 base_local_product[product_id][:product_attr], 也可以自己指定name
				end
			end
	   end

175.下载的csv文件如果头两个是大写字母
	Excel 已经检测到"xxx.xsl"是SYLK文件,但是不能将其加载解决方法
	http://blog.csdn.net/dujiajiyu/article/details/34087757
176.关于gem中的版本指定
	~>  和  >=
	~>这种表示近似大于
	>=这种就是大于等于
	这意味着“等于或大于最后一位数字”，因此例如~> 2.3意味着“等于2.3或大于2.3，但小于3.0”，而~> 2.3.0意味着“等于2.3.0或大于2.3.0，但小于比2.4.0“。

	可以将其理解为“近似大于”。
177.lib中的.rb文件在application.rb里require就可以用了，要写在最后面

178.使用url_encode可以解决传输的文件名乱码的问题
	但需要require进来
	require 'erb'
	include ERB::Util

	def encode_file_name file_name
		return if file_name.blank?
		# return url_encode(file_name) if Settings[:filename_force_url_encode]
		client = DeviceDetector.new(request.env['HTTP_USER_AGENT'])
		case client.name
		  when 'Internet Explorer' #"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; BOIE9;ZHCN; rv:11.0) like Gecko"
			url_encode(file_name)
		  when 'Chrome' #"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.59 Safari/537.36"
			file_name
		  when 'Firefox' #"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0"
			file_name
		  when 'Safari' #"Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN) AppleWebKit/525.27.1 (KHTML, like Gecko) Version/3.2.1 Safari/525.27.1"
			file_name
		  else
			url_encode(file_name)
		end
	  end
	  可以按浏览器来
179.iCheck中，如果最开始相关的radio和checkbox就是disabled的话，最后生成的iCheck颜色就很淡
	如果在生成完后再disabled就不会了
180.对于假删除，如果一个值建立了唯一索引，被假删除了也不能建立相同的数据，切记
181.对于devise，如果在页面上成功修改了密码，只要redirect一下就会跳转到登录页面
182.如果只想要验证某一部分的字段，可以valid?，然后判断errors中有没有指定的那些字段的key就可以了
183.对于chorme自动补全用户名密码，如果不想要，可以设置
	<input type="text" name="username" autocomplete="off/nope" />
	<input type="password" name="password" autocomplete="new-password" />
	这样就不会自动填充用户名和密码了
	https://gist.github.com/runspired/b9fdf1fa74fc9fb4554418dea35718fe
184. 跨域 The 'Access-Control-Allow-Origin' header contains multiple values '*, *', but only one is allowed
	response.headers['Access-Control-Allow-Origin'] = '*'
185.如果在移动设备的shadowbox中没有scrollbar的话
	$('#sb-body-inner').css({
						'overflow': 'scroll',
						'-webkit-overflow-scrolling': 'touch'
					});
	}
186.在rubymine的edit configuration中指定ip成自己的ip，别人就可以访问你的项目了
187.$(form).serialize() 可以获取这个form的所有参数
188.devkit需要安装在ruby中 cmd进ruby/devkit ruby dk.rb init => 修改 config.yml ruby根目录 => ruby dk.rb install
189.多态：同一操作作用于不同的对象可以有不同的解释产生不同的执行结果，需要继承(java还有接口)
	继承主要是为了重用代码，节省开发时间，也可实现继承多态，通过重写方法
	封装是用来整合一个对象的属性和方法，隐藏内部的实现细节只通过对外开放一些方法同外部进行交互

	五大基本原则: 单一职能原则，开放封闭原则(功能可扩展，但尽量不修改原来的程序，而是继承去拓展), 替换原则:子类可以替换基类父类不可以替换子类(继承的机制，子类可能会有比父类更多的方法和属性),依赖倒置原则,接口隔离原则(接口的功能尽量单一)
190.假删除
	paranoid, '~> 2.2'
	acts_as_paranoid column: :deleted, sentinel_value: false
191.遍历csv
	CSV.read(path, encoding: '').each
	CSV.foreach(path, encoding(xx:xx)) do
	CSV.open(path, 'ab/a+')可以向其中添加行
192.alias和alias_method的区别
	alias :method1/method1/(不能是字符串) :method2 <=> alias_method :method1/'method1', :method2
193.让rails默认加载lib下的文件
	https://www.jianshu.com/p/e4446432e9cb
	在config/application.rb
	config.autoload_paths << Rails.root.join('lib') # 开发模式可以用, 产中环境不允许
	cofig.eager_load_paths << [产品模式用这个]
194.function(*args)
	args是一个数组，*args就是多个参数了
	def function(a = [], b)
	function(1) => a: [], b: 1
195.如果一个类想关联两个不同类型的图片，像ec中的picture和icon
	has_one :category_icon, ->(o) { unscope(where: :owner_type).where(owner_type: 'CategoryIcon') }, dependent: :destroy, as: :owner
	这样可以在查询的时候，限制其 owner_type
	new的时候，picture.owner = category	#(这个会直接赋值id和type, type和 polymorphic有关，多态)
		这时候可以再手动修改owner_type
	https://stackoverflow.com/questions/10083667/ruby-on-rails-has-many-define-class-name-for-polymorphic-relationship
196.可以设置rails的默认时间
	# Date
	Date::DATE_FORMATS[:default] = "%d/%m/%Y"

	# Time
	Time::DATE_FORMATS[:default] = "%d/%m/%Y %H:%M"
	to config/initializers/date_time.rb
197.访问虚拟机上的网页时，资源文件的源地址都变成了localhost:3000，导致都访问不到
	需要修改application.yml中的cdn为''，如果设置了会默认从这里去访问的，配置这个的好处是，把资源放到云上，
	服务器就不需要太大的带宽了
198.360浏览器 在使用FontAwesome时可能会出现的bug
	容器内使用FontAwesome的i标签可能受全局字体影响，i标签的高度正常，但容器显示的容器内容高度要比i标签要高，这时可以把窗口的字体设置为空
199.https://github.com/80percent/rails-template/wiki/how-to-deploy-rails-to-ubuntu1404-with-rails-template
	ubuntu下载rails
	切换ruby 版本
	rbenv local v
200. block = ->(a, b){body}    block = &->(a, b){body}    &block = &->(a, b){body}
201.
	Time.now => 服务器当前时间
	Time.zone.now => 设定的时区的当前时间 # config/application.rb => config.time_zone = "BeiJing"

202.ubuntu查看本机公钥，cat ~/.ssh/xx.pub
	连接产品环境console: mina production console
	mina log查看dev的log/mina ssh
		ssh中 top 可以查看当前环境的内存cpu使用   free
		mina puma:hard_restart 可以重启服务器
       ssh root@develop.iballu.cn
       有root之后可以安装工具 atop(比top更加详细) iotop(io监控)
203.对于页面中的checkbox表单，如果没有check，则不会有值上传
    同名的表单后面会覆盖前面的，name为数组的不会覆盖，而是叠加
    check_box会放两个表单，如果一个hidden, 一个checkbox，两个name相同，值不同，如果check了就以check的值为准，没有check就以hidden为准，不会没有值上传，check_box_tag则只会有一个值上传了

204.html标签的tabindex 会影响页面显示最上方显示的位置

205.让固定宽图片在百分比窗口内水平居中：left: 50%, margin-left: 50% * width